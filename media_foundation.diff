diff --git a/interface/inner_api/common/media_core.h b/interface/inner_api/common/media_core.h
index 151d2147..1582d2a9 100644
--- a/interface/inner_api/common/media_core.h
+++ b/interface/inner_api/common/media_core.h
@@ -19,6 +19,7 @@
 #include <map>
 #include <string_view>
 #include "errors.h"
+#include "buffer/avbuffer.h"
 
 namespace OHOS {
 namespace Media {
@@ -166,6 +167,7 @@ enum PlayerSeekMode : int32_t {
     SEEK_CLOSEST_SYNC,
     /* seek to frames closest the time point. */
     SEEK_CLOSEST,
+    SEEK_CONTINOUS,
 };
 
 /**
@@ -206,6 +208,18 @@ struct GopLayerInfo {
     std::map<uint8_t, uint32_t> layerFrameNum;
 };
 
+class VideoStreamReadyCallback {
+public:
+    virtual ~VideoStreamReadyCallback() = default;
+    virtual bool IsVideoStreamDiscardable(std::shared_ptr<AVBuffer> buffer) = 0;
+};
+
+class VideoFrameReadyCallback {
+public:
+    virtual ~VideoFrameReadyCallback() = default;
+    virtual void ConsumeVideoFrame(std::shared_ptr<AVBuffer> buffer, uint32_t bufferIndex) = 0;
+};
+
 } // namespace Media
 } // namespace OHOS
 #endif // MEDIA_CORE_H
diff --git a/interface/inner_api/filter/filter.h b/interface/inner_api/filter/filter.h
index 29084537..97ce40d9 100644
--- a/interface/inner_api/filter/filter.h
+++ b/interface/inner_api/filter/filter.h
@@ -130,7 +130,14 @@ public:
 
     virtual Status ProcessInputBuffer(int sendArg = 0, int64_t delayUs = 0) final;
 
-    virtual Status ProcessOutputBuffer(int sendArg = 0, int64_t delayUs = 0) final;
+    /**
+     * @param byIdx render this frame by buffer index.
+     * @param idx render by idx if byIdx is true.
+     * @param byRenderTime render this frame by render time.
+     * @param renderTime render at renderTime if byRenderTime is true.
+     */
+    virtual Status ProcessOutputBuffer(int sendArg = 0, int64_t delayUs = 0, bool byIdx = false, uint32_t idx = 0,
+        bool byRenderTime = false, int64_t renderTime = -1) final;
 
     virtual Status WaitAllState(FilterState state) final;
 
@@ -154,7 +161,8 @@ public:
 
     virtual Status DoProcessInputBuffer(int recvArg, bool dropFrame);
 
-    virtual Status DoProcessOutputBuffer(int recvArg, bool dropFrame);
+    virtual Status DoProcessOutputBuffer(int recvArg, bool dropFrame, bool byIdx, uint32_t idx, bool byRenderTime,
+        int64_t renderTime);
 
     virtual void SetParameter(const std::shared_ptr<Meta>& meta);
 
diff --git a/src/filter/filter.cpp b/src/filter/filter.cpp
index df77f8b5..093c782a 100644
--- a/src/filter/filter.cpp
+++ b/src/filter/filter.cpp
@@ -319,18 +319,23 @@ Status Filter::ProcessInputBuffer(int sendArg, int64_t delayUs)
     return Status::OK;
 }
 
-Status Filter::ProcessOutputBuffer(int sendArg, int64_t delayUs)
+Status Filter::ProcessOutputBuffer(int sendArg, int64_t delayUs, bool byIdx, uint32_t idx, bool byRenderTime,
+    int64_t renderTime)
 {
     MEDIA_LOG_D("Filter::ProcessOutputBuffer  %{public}s", name_.c_str());
+    if (byRenderTime) {
+        delayUs = 0;
+    }
     if (filterTask_) {
         jobIdx_++;
-        filterTask_->SubmitJob([this, sendArg]() {
+        filterTask_->SubmitJob([this, sendArg, byIdx, idx, byRenderTime, renderTime]() {
             processIdx_++;
-            DoProcessOutputBuffer(sendArg, processIdx_<= jobIdxBase_); // drop frame after flush
+            // drop frame after flush
+            DoProcessOutputBuffer(sendArg, processIdx_<= jobIdxBase_, byIdx, idx, byRenderTime, renderTime);
         }, delayUs, 0);
     } else {
         Task::SleepInTask(delayUs / 1000); // 1000 convert to ms
-        DoProcessOutputBuffer(sendArg, false);
+        DoProcessOutputBuffer(sendArg, false, false, idx, false, renderTime);
     }
     return Status::OK;
 }
@@ -386,7 +391,8 @@ Status Filter::DoProcessInputBuffer(int recvArg, bool dropFrame)
     return Status::OK;
 }
 
-Status Filter::DoProcessOutputBuffer(int recvArg, bool dropFrame)
+Status Filter::DoProcessOutputBuffer(int recvArg, bool dropFrame, bool byIdx, uint32_t idx, bool byRenderTime,
+    int64_t renderTimee)
 {
     return Status::OK;
 }
